Shader "TheRPG/VolumeFog"
{
    Properties
    {
        
        _A("初始浓度", range(0, 8)) = 1
        _FogColor("雾颜色", color) = (1, 1, 1, 1)
        _NoiseTiling("噪声平铺", range(0.1, 1)) = 0.22
        _NoiseMin("噪声谷值", range(0, 1)) = 0 
        _NoiseMax("噪声峰值", range(0, 1)) = 1 
        _NoiseSpd("噪声速度", range(0, 4)) = 1
        _NoiseDir("噪声方向", vector) = (1, 0, 0, 0)
        [Enum(y, 1, z, 2)]
        _Plane("平面", int) = 2
        [HideInInspector] [Toggle(_APPLY_LIGHT)]_ApplyLight("接受光照", float) = 1
        _Light("受光度", range(0, 1)) = 1
        
    }
    SubShader
    {
        Tags 
        {
            "RenderType"="Opaque" 
            "Queue"="Transparent"
        }

        // Pass
        // {
        //     Tags
        //     {
        //         "LightMode"="BuildingPreZ"
        //     }
        //     ZWrite On
        //     ZTest Less
        //     ColorMask 0
        //     HLSLPROGRAM
        //     #pragma vertex vert
        //     #pragma fragment frag

        //     #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"    

        //     struct appdata
        //     {
        //         float4 positionOS : POSITION;
        //     };

        //     struct v2f
        //     {
        //         float4 positionCS : SV_POSITION;
        //     };

        //     v2f vert (appdata v)
        //     {
        //         v2f o;
        //         o.positionCS = TransformObjectToHClip(v.positionOS.xyz);
        //         return o;
        //     }

        //     float4 frag (v2f i) : SV_Target
        //     {
        //         return 0;
        //     }

        //     ENDHLSL

        // }

        Pass
        {
            Tags
            {
                "LightMode"="TransparentBuilding3D"
            }
            ZWrite Off
            ZTest Less
            //ZTest Less
            Blend SrcAlpha OneMinusSrcAlpha
            
            HLSLPROGRAM
            #pragma multi_compile USE_SHAPE_LIGHT_TYPE_0 __
            #pragma multi_compile USE_SHAPE_LIGHT_TYPE_1 __
            #pragma multi_compile USE_SHAPE_LIGHT_TYPE_2 __
            #pragma multi_compile USE_SHAPE_LIGHT_TYPE_3 __
            #pragma shader_feature _APPLY_LIGHT
            #pragma vertex vert
            #pragma fragment frag

            #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
            #include "Assets\Resource_SVN\Shaders\TheRPG\Buildings\GeneralMethod.hlsl"

            #include "Packages/com.unity.render-pipelines.universal/Shaders/2D/Include/LightingUtility.hlsl"

            struct appdata
            {
                float4 positionOS : POSITION;
                float2 uv : TEXCOORD0;
            };

            struct v2f
            {
                float4 positionCS : SV_POSITION;
                float2 uv : TEXCOORD0;
                float4 screenUV : TEXCOORD1;
                float3 positionWS : TEXCOORD2;
            };

            Texture2D _2DCameraDepthTexture;
            SamplerState sampler_2DCameraDepthTexture;
            float _A;
            float4 _FogColor;
            float _NoiseTiling;
            float _NoiseMin;
            float _NoiseMax;
            float _NoiseSpd;
            float3 _NoiseDir;
            int _Plane;
            float _Light;

            #if USE_SHAPE_LIGHT_TYPE_0
                SHAPE_LIGHT(0)
            #endif

            #if USE_SHAPE_LIGHT_TYPE_1
                UnityInstancePerMaterialSHAPE_LIGHT(1)
            #endif

            #if USE_SHAPE_LIGHT_TYPE_2
                SHAPE_LIGHT(2)
            #endif

            #if USE_SHAPE_LIGHT_TYPE_3
                SHAPE_LIGHT(3)
            #endif


            #include "Assets\Resource_SVN\Shaders\TheRPG\Buildings\GeneralMethod.hlsl"
            v2f vert (appdata v)
            {
                v2f o;
                o.positionCS = TransformObjectToHClip(v.positionOS.xyz);
                o.uv = v.uv;
                o.screenUV = ComputeScreenPos(o.positionCS);
                o.positionWS = TransformObjectToWorld(v.positionOS.xyz);
                return o;
            }


            #define LOOP_COUNT 4
            float GetFogAmount_Raymaching(in float dis, // camera to point distance
                in float3  rayOri, // camera position
                in float3  rayDir,
                in float   a)
            {
                float amount = 0;
                float s = dis / LOOP_COUNT;
                float3 dir = normalize(_NoiseDir);
                UNITY_UNROLL
                for (int i = 0; i < LOOP_COUNT; i++) {
                    float3 pos = rayOri + s * (i + .5) * rayDir;
                    pos = pos + _Time.y * _NoiseSpd * dir;
                    float noise1 = fbm(pos * _NoiseTiling) * .5 + .5;
                    noise1 = lerp(_NoiseMin, _NoiseMax, noise1);
                    float noise = noise1;
                    amount += a * noise  * s ;
                }
                return amount;
            }

            #include "Packages/com.unity.render-pipelines.universal/Shaders/2D/Include/CombinedShapeLightShared.hlsl"

            float4 frag (v2f i) : SV_Target
            {
                float2 screenUV = i.screenUV.xy / i.screenUV.w;
                float3 rayOri = i.positionWS;
                float3 rayDir = normalize(i.positionWS - GetCameraPositionWS());
                float3 camPos = GetCameraPositionWS();
                float a = _A;
                float t = -rayOri[_Plane] / rayDir[_Plane];
                float3 landPosition = rayOri + rayDir * t;
                float dis = distance(rayOri, landPosition);
                
                float depth = _2DCameraDepthTexture.Sample(sampler_2DCameraDepthTexture, screenUV).r;
                float3 screenPoisitonWS = ScreenPosToWorldPositionWS(screenUV, depth);
                //dis = min(distance(rayOri, screenPoisitonWS), dis);
                dis = min(distance(rayOri, screenPoisitonWS), dis);

                float fogAmount = GetFogAmount_Raymaching(dis, rayOri, rayDir, a);
                float3 fogColor = fogAmount * _FogColor.rgb;
                float4 col = float4(fogColor, saturate(fogAmount)); 
            #if _APPLY_LIGHT
                col = lerp(col, CombinedShapeLightShared(col, 1, screenUV), _Light);
            #endif
                return col;
            }
            ENDHLSL
        }
    }
}
